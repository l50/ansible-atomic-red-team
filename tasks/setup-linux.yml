---
- name: Setup PowerShell on Linux systems
  when: ansible_system == 'Linux'
  block:
    - name: Define default PowerShell package details
      ansible.builtin.set_fact:
        ps_arch_map: { x86_64: "x64", aarch64: "arm64" }
        ps_pkg_name: "powershell-linux.tar.gz"
        ps_download_url: "https://github.com/PowerShell/PowerShell/releases/download/v{{ ansible_atomic_red_team_pwsh_version }}/powershell-linux.tar.gz"

    - name: Determine PowerShell package details
      ansible.builtin.set_fact:
        ps_pkg_name: "powershell-{{ ansible_atomic_red_team_pwsh_version }}-linux-{{ ps_arch_map[ansible_architecture] }}.tar.gz"
        ps_download_url: "https://github.com/PowerShell/PowerShell/releases/download/v{{ ansible_atomic_red_team_pwsh_version }}/{{ ps_pkg_name }}"
      when: ansible_architecture in ['x86_64', 'aarch64']

    - name: Install dependencies
      ansible.builtin.include_role:
        name: cowdogmoo.workstation.package_management
      vars:
        package_management_common_install_packages: "{{ ansible_atomic_red_team_common_install_packages }}"
        package_management_debian_specific_packages: "{{ ansible_atomic_red_team_debian_specific_packages }}"
        package_management_redhat_specific_packages: "{{ ansible_atomic_red_team_redhat_specific_packages }}"
      when: ansible_os_family in ['Debian', 'RedHat']

    - name: Determine PowerShell package details
      ansible.builtin.set_fact:
        ps_arch_map: { x86_64: "x64", aarch64: "arm64" }
        ps_pkg_name: "powershell-{{ ansible_atomic_red_team_pwsh_version }}-linux-{{ ps_arch_map[ansible_architecture] }}.tar.gz"
        ps_download_url: "https://github.com/PowerShell/PowerShell/releases/download/v{{ ansible_atomic_red_team_pwsh_version }}/{{ ps_pkg_name }}"
      when: ansible_architecture in ['x86_64', 'aarch64']

    - name: Download and install PowerShell
      block:
        - name: Download PowerShell package
          ansible.builtin.get_url:
            url: "{{ ps_download_url }}"
            dest: "/tmp/{{ ps_pkg_name }}"
            mode: "0755"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"

        - name: Create PowerShell installation directory
          ansible.builtin.file:
            path: "{{ ansible_atomic_red_team_nix_pwsh_path }}"
            state: directory
            mode: "0755"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"

        - name: Extract PowerShell package
          ansible.builtin.unarchive:
            src: "/tmp/{{ ps_pkg_name }}"
            dest: "{{ ansible_atomic_red_team_nix_pwsh_path }}"
            remote_src: true

        - name: Set execute permissions for pwsh
          ansible.builtin.file:
            path: "{{ ansible_atomic_red_team_nix_pwsh_path }}/pwsh"
            mode: "+x"

        - name: Create symlink for pwsh
          ansible.builtin.file:
            src: "{{ ansible_atomic_red_team_nix_pwsh_path }}/pwsh"
            dest: "/usr/bin/pwsh"
            state: link

        - name: Verify PowerShell installation
          ansible.builtin.command: pwsh -Version
          register: pwsh_version
          failed_when: pwsh_version.rc != 0
          changed_when: false

    - name: Check if Invoke-AtomicRedTeam is already installed
      ansible.builtin.shell:
        cmd: |
          $module = Get-Module -ListAvailable -Name Invoke-AtomicRedTeam;
          if ($module) { Write-Output "installed" } else { Write-Output "not installed" }
        executable: pwsh
      register: check_art_installed
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: Install Invoke-AtomicRedTeam
      ansible.builtin.shell:
        cmd: >
          IEX (IWR 'https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1' -UseBasicParsing);
          Install-AtomicRedTeam -getAtomics -Force
        executable: pwsh
      when: "'not installed' in check_art_installed.stdout"
      register: art_install
      failed_when: art_install.rc != 0
      changed_when: "'Installed' in art_install.stdout"
      ignore_errors: true

    - name: Log installation errors if failed
      ansible.builtin.debug:
        msg: "Installation failed with stdout: {{ art_install.stdout }} and stderr: {{ art_install.stderr }}"
      when: art_install.failed

    - name: Configure PowerShell profile with Invoke-AtomicRedTeam
      block:
        - name: Get PowerShell profile path
          ansible.builtin.shell:
            cmd: |
              $PROFILE.AllUsersAllHosts
            executable: pwsh
          register: pwshprofile
          changed_when: false

        - name: Update PowerShell profile to import AtomicRedTeam module
          ansible.builtin.lineinfile:
            path: "{{ pwshprofile.stdout }}"
            state: present
            regex: '.*Invoke-AtomicRedTeam.*'
            line: "Import-Module '{{ ansible_user_dir }}/AtomicRedTeam/invoke-atomicredteam/Invoke-AtomicRedTeam.psd1' -Force"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_id }}"
            mode: '0644'
            create: true
